@page "/settings"
@using GymTracker.BlazorClient.Features.AppBar.Store;
@using GymTracker.BlazorClient.Features.AppSettings.Store;
@using System.Collections.Immutable;
@using GymTracker.BlazorClient.Features.Common.ListItemFieldEditor

@inherits FluxorComponent

@inject IState<AppSettingsState> State
@inject IDispatcher Dispatcher

<MudContainer Class="pa-3 ma-0">
    <MudCard Style="width:100%">
        <MudCardContent>
            <MudText>Backup</MudText>
            <MudTextField 
                Value="State.Value.Settings?.AzureBlobBackupContainerSASURI"
                ValueChanged="(string value) => HandleAzureBlobBackupContainerSASURIChanged(value)"
                Label="Azure Blob Container SAS Uri" 
                Variant="Variant.Outlined">
            </MudTextField>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="HandleBackupAll">
                Backup All
            </MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="HandleRestoreAll">
                Restore All
            </MudButton>
        </MudCardActions>
    </MudCard>

    <MudCard Class="mt-4" Style="width:100%">
        <MudCardContent>
            <MudText>Exercise Lookups</MudText>
            <ListEditor
                Label="Target Body Part"
                List="State.Value.BodyTargets"
                OnAdd="HandleAddTargetBody"
                OnRemove="HandleDeleteTargetBody"></ListEditor>
        </MudCardContent>
        <MudCardContent>
            <ListEditor 
                Label="Equipment"
                List="State.Value.Equipment"
                OnAdd="HandleAddEquipment"
                OnRemove="HandleDeleteEquipment"></ListEditor>
        </MudCardContent>

    </MudCard>
</MudContainer>

@code {
    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new FetchSettingsAction());
        Dispatcher.Dispatch(new SetBreadcrumbAction(new []
        {
            new BreadcrumbItem("App Settings", "/settings", false, Icons.Material.Filled.Settings)
    }));
        base.OnInitialized();
    }

    void HandleAzureBlobBackupContainerSASURIChanged(string value) =>
        Dispatcher.Dispatch(new UpdateSettingsAction(State.Value.Settings with 
                {
                    AzureBlobBackupContainerSASURI = value
                }));

    void HandleBackupAll() => Dispatcher.Dispatch(new BackupAllAction());
    void HandleRestoreAll() => Dispatcher.Dispatch(new RestoreAllAction());

    void HandleAddTargetBody(string targetBody) => Dispatcher.Dispatch(new AddTargetBodyAction(targetBody));
    void HandleDeleteTargetBody(string targetBody) => Dispatcher.Dispatch(new DeleteTargetBodyAction(targetBody));
    void HandleAddEquipment(string equipment) => Dispatcher.Dispatch(new AddEquipmentAction(equipment));
    void HandleDeleteEquipment(string equipment) => Dispatcher.Dispatch(new DeleteEquipmentAction(equipment));
}
