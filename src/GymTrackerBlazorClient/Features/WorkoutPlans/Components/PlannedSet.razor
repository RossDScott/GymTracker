@using GymTracker.BlazorClient.Features.WorkoutPlans.Components.SetMetrics
@using GymTracker.BlazorClient.Features.WorkoutPlans.Store;
@using GymTracker.Domain.Models;

<MudListItem>
    <MudGrid>
        <MudItem xs="1" Class="d-flex align-content-end">
            <div Class="align-self-end" style="margin-bottom:7px">
                <MudText Typo="Typo.body1">@Set.OrderForSetType</MudText>
            </div>
        </MudItem>
        <MudItem xs="3">
            <MudSelect @bind-Value="Set.SetType"
                       @bind-Value:after="HandleChanged"
                       Dense="true"
                       DisableUnderLine="true"
                       Class="mt-0">
                @foreach (var set in _setTypes)
                {
                    <MudSelectItem T="string" Value="set" />
                }
            </MudSelect>
        </MudItem>

        @RenderSetMetrics(Set)

        <MudItem xs="2">
            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                           OnClick="OnDeleteSet"
                           Class="pb-0 mb-n6"></MudIconButton>
        </MudItem>
    </MudGrid>
</MudListItem>

@code {
    RenderFragment RenderSetMetrics(PlannedSetDetail set) => MetricType switch
    {
        MetricType.Weight => @<WeightSet Set="set" OnUpdateSet="OnUpdateSet"></WeightSet>,
        MetricType.Time => @<TimedSet Set="set" OnUpdateSet="OnUpdateSet"></TimedSet>,
        MetricType.TimeAndDistance => @<TimeAndDistanceSet Set="set" OnUpdateSet="OnUpdateSet"></TimeAndDistanceSet>,
        MetricType.Reps => @<Reps Set="set" OnUpdateSet="OnUpdateSet"></Reps>,
        _ => throw new ArgumentOutOfRangeException(nameof(MetricType))
    };
}

@code {
    [Parameter, EditorRequired]
    public PlannedSetDetail Set { get; set; } = default!;

    [Parameter]
    public MetricType MetricType { get; set; }

    [Parameter]
    public EventCallback OnUpdateSet { get; set; }

    [Parameter]
    public EventCallback OnDeleteSet { get; set; }

    string[] _setTypes = { "Warm-up", "Set", "Drop-set" };

    void HandleChanged() => OnUpdateSet.InvokeAsync();
}
