@page "/workout-plans"
@page "/workout-plans/{SelectedWorkoutPlanId:guid}"
@page "/workout-plans/new"
@page "/workout-plans/{SelectedWorkoutPlanId:guid}/{SelectedExerciseId:guid}"

@using GymTracker.BlazorClient.Features.Common;
@using GymTracker.BlazorClient.Features.Common.FullHeightList
@using GymTracker.BlazorClient.Features.WorkoutPlans.Store;

@inherits FluxorComponent

@inject NavigationManager NaviagationManager
@inject IState<WorkoutPlansState> State
@inject IDispatcher Dispatcher

<MudGrid Class="fullHeight ma-0" Justify="Justify.SpaceEvenly" Style="width: 100%">
    <MudItem xs="4" Class="mb-0 fullHeight" Style="position: relative">
        <FullHeightList 
            List="State.Value.WorkoutPlans"
            SelectedId="State.Value.SelectedWorkoutPlan?.Id"
            OnItemClick="HandleWorkoutPlanSelected"
            OnAddItem="HandleAddNewWorkoutPlan">
        </FullHeightList>
    </MudItem>
    <MudItem xs="4" Class="">
        @if(State.Value.SelectedWorkoutPlan is not null)
        {
            <WorkoutPlan
                WorkoutPlanDetail="State.Value.SelectedWorkoutPlan"
                OnWorkoutPlanUpdated="HandleUpdateWorkout"
                SelectedExerciseId="State.Value.SelectedExercise?.Id"
                OnExerciseSelected="HandleSelectExercise">
            </WorkoutPlan>
        }
    </MudItem>
    <MudItem xs="4" Class="">
        @if(State.Value.SelectedExercise is not null)
        {
            <PlannedExercise
                PlannedExerciseDetail="State.Value.SelectedExercise">

            </PlannedExercise>
        }
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public Guid? SelectedWorkoutPlanId { get; set; }

    [Parameter]
    public Guid? SelectedExerciseId { get; set; }

    protected override void OnInitialized()
    {
        NaviagationManager.LocationChanged += HandleLocationChanged;

        //SubscribeToAction<NavigateToNewExerciseAction>(action =>
        //    NaviagationManager.NavigateTo($"/exercises/{action.Id}"));

        HandleSetupPageByLocation(NaviagationManager.Uri, true);
        base.OnInitialized();
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e) =>
        HandleSetupPageByLocation(e.Location);

    private void HandleSetupPageByLocation(string location, bool initialLoad = false)
    {
        if (location.EndsWith("plans") || initialLoad)
            Dispatcher.Dispatch(new FetchWorkoutPlansInitialStateAction());

        if (SelectedExerciseId is not null)
            Dispatcher.Dispatch(new FetchExerciseAction(SelectedWorkoutPlanId.Value, SelectedExerciseId.Value));
        else if (SelectedWorkoutPlanId is not null)
            Dispatcher.Dispatch(new FetchWorkoutPlanAction(SelectedWorkoutPlanId.Value));

        if (location.EndsWith("new"))
            Dispatcher.Dispatch(new CreateNewWorkoutPlanAction());
    }

    void HandleWorkoutPlanSelected(ListItem item) =>
        NaviagationManager.NavigateTo($"/workout-plans/{item.Id}");

    void HandleAddNewWorkoutPlan() =>
        NaviagationManager.NavigateTo($"/workout-plans/new");

    void HandleUpdateWorkout(WorkoutPlanDetail updateDTO) =>
        Dispatcher.Dispatch(new AddOrUpdateWorkoutPlanAction(updateDTO));

    void HandleSelectExercise(ListItem item) =>
        NaviagationManager.NavigateTo($"/workout-plans/{SelectedWorkoutPlanId}/{item.Id}");

}
