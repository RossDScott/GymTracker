@using GymTracker.BlazorClient.Features.Common.FullHeightList
@using GymTracker.BlazorClient.Features.Common;
@using GymTracker.BlazorClient.Features.SidePanel;
@using GymTracker.BlazorClient.Features.WorkoutPlans.Store;
@using GymTracker.BlazorClient.Features.Common.ExercisePicker.Components;
@using System.Collections.Immutable;
@using GymTracker.Domain.Models;

@inject IDispatcher Dispatcher
@inject SidePanelService SidePanelService

<MudPaper Class="pa-2">
    <MudForm @ref="_form">
        <MudStack Class="fullHeight ma-0">
            <MudTextField @bind-Value="_workoutPlanName"
                          For="@(() => _workoutPlanName)"
                          Immediate="true"
                          DebounceInterval="500"
                          OnDebounceIntervalElapsed="HandleUpdateWorkoutPlan"
                          Label="Workout Plan Name"
                          Variant="Variant.Outlined"
                          Required="true"
                          RequiredError="Workout Plan Name required!">
            </MudTextField>

            <MudItem xs="4" Class="mb-0 fullHeight fullWidth" Style="position: relative">
                <MudText Typo="Typo.overline">Planned Exercises</MudText>
                <FullHeightList CanReorder="true"
                                List="_plannedExercises"
                                SelectedId="SelectedExerciseId"
                                OnAddItem="HandleAddExercise"
                                OnItemClick="HandleExerciseSelected"
                                OnChangeOrder="((ListItem item, OrderDirection direction)x) 
                                    => HandleChangeOrder(x.item, x.direction)">
                </FullHeightList>
            </MudItem>
        </MudStack>
    </MudForm>
</MudPaper>

@code {
    [Parameter, EditorRequired]
    public WorkoutPlanDetail WorkoutPlanDetail { get; set; } = default!;

    [Parameter, EditorRequired]
    public EventCallback<WorkoutPlanDetail> OnWorkoutPlanUpdated { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<ListItem> OnExerciseSelected { get; set; }

    [Parameter, EditorRequired]
    public Guid? SelectedExerciseId { get; set; } = null;

    MudForm _form;
    string _workoutPlanName = string.Empty;
    bool _isActive = true;

    ImmutableArray<ListItem> _plannedExercises = ImmutableArray<ListItem>.Empty;

    protected override void OnParametersSet()
    {
        _workoutPlanName = WorkoutPlanDetail.Name;
        _plannedExercises = WorkoutPlanDetail.PlannedExercises;

        _isActive = WorkoutPlanDetail.IsActive;

        _form?.ResetValidation();

        base.OnParametersSet();
    }

    async Task HandleUpdateWorkoutPlan()
    {
        await _form.Validate();

        if (!_form.IsValid)
            return;

        var updateDTO = WorkoutPlanDetail with
            {
                Name = _workoutPlanName,

                IsActive = _isActive
            };

        await OnWorkoutPlanUpdated.InvokeAsync(updateDTO);
    }

    void HandleExerciseSelected(ListItem item) => OnExerciseSelected.InvokeAsync(item);

    async Task HandleAddExercise()
    {
        var response = SidePanelService.ShowSidePanel<ExercisePicker, ListItem>();
        var result = await response.Result();

        if (!result.Canceled)
        {
            var exerciseId = result.Data!.Id;
            Dispatcher.Dispatch(new AddExerciseToWorkoutPlanAction(WorkoutPlanDetail.Id, exerciseId));
        }
    }

    void HandleChangeOrder(ListItem item, OrderDirection direction)
    {
        Dispatcher.Dispatch(new ChangeOrderAction(WorkoutPlanDetail.Id, item.Id, direction));
    }
}