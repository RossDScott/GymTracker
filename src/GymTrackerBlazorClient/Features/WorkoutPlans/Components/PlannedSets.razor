@using System.Collections.Immutable;
@using GymTracker.BlazorClient.Features.WorkoutPlans.Components.SetMetrics
@using GymTracker.BlazorClient.Features.WorkoutPlans.Store;
@using GymTracker.BlazorClient.Shared.Extensions;
@using GymTracker.Domain.Models;

<MudField Label="Planned Sets" Variant="Variant.Outlined">
    <div class="fullHeight" style="position: relative">
        <MudList>
            @foreach (var (item, index) in _sets.LoopIndex())
            {
                <PlannedSet Set="item" 
                            MetricType="MetricType"
                            OnUpdateSet="HandleChange"></PlannedSet>
            }
        </MudList>

        <div class="d-flex flex-row-reverse">
            <MudFab Color="Color.Dark"
                    Size="Size.Small"
                    StartIcon="@Icons.Material.Filled.Add" />
        </div>
    </div>
</MudField>

@code {
    [Parameter]
    public ImmutableArray<PlannedSetDetail> Sets { get; set; } = ImmutableArray<PlannedSetDetail>.Empty;

    [Parameter]
    public MetricType MetricType { get; set; }

    [Parameter]
    public EventCallback<ImmutableArray<PlannedSetDetail>> OnUpdateSets { get; set; }

    List<PlannedSetDetail> _sets = new();

    protected override void OnParametersSet()
    {
        _sets = Sets.ToList();

        base.OnParametersSet();
    }

    void HandleChange() => OnUpdateSets.InvokeAsync(_sets.ToImmutableArray());
}

