@page "/workout-plans"

@using GymTracker.BlazorClient.Features.Common;
@using GymTracker.BlazorClient.Features.Common.FullHeightList
@using GymTracker.BlazorClient.Features.WorkoutPlans.Store;

@inherits FluxorComponent

@inject NavigationManager NaviagationManager
@inject IState<WorkoutPlansState> State
@inject IDispatcher Dispatcher

<MudGrid Class="fullHeight ma-0" Justify="Justify.FlexStart" Spacing="1" Style="width: 100%">
    <MudItem xs="@(State.Value.SelectedWorkoutPlan == null ? 4 : 2)" Class="mb-0 fullHeight" Style="position: relative">
        <FullHeightList 
            List="State.Value.WorkoutPlans"
            SelectedId="State.Value.SelectedWorkoutPlan?.Id"
            AutoCollapseOnSelection="true"
            OnItemClick="HandleWorkoutPlanSelected"
            OnAddItem="HandleAddNewWorkoutPlan">
        </FullHeightList>
    </MudItem>
    <MudItem xs="3" Class="">
        @if(State.Value.SelectedWorkoutPlan is not null)
        {
            <WorkoutPlan
                WorkoutPlanDetail="State.Value.SelectedWorkoutPlan"
                OnWorkoutPlanUpdated="HandleUpdateWorkout"
                SelectedExerciseId="State.Value.SelectedExercise?.Id"
                OnExerciseSelected="HandleSelectExercise">
            </WorkoutPlan>
        }
    </MudItem>
    <MudItem xs="5" Class="">
        @if(State.Value.SelectedExercise is not null)
        {
            <PlannedExercise
                PlannedExerciseDetail="State.Value.SelectedExercise">

            </PlannedExercise>
        }
    </MudItem>
</MudGrid>

@code {
    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new FetchWorkoutPlansInitialStateAction());

        base.OnInitialized();
    }

    void HandleWorkoutPlanSelected(ListItem item)
    {
        if (item.Id == State.Value.SelectedWorkoutPlan?.Id)
            Dispatcher.Dispatch(new SetWorkoutPlanAction(null));
        else
            Dispatcher.Dispatch(new FetchWorkoutPlanAction(item.Id));
    }

    void HandleAddNewWorkoutPlan() =>
        Dispatcher.Dispatch(new CreateNewWorkoutPlanAction());

    void HandleUpdateWorkout(WorkoutPlanDetail updateDTO) =>
        Dispatcher.Dispatch(new UpsertWorkoutPlanAction(updateDTO));

    void HandleSelectExercise(ListItem item) => Dispatcher.Dispatch(
            new FetchExerciseAction(State.Value.SelectedWorkoutPlan!.Id, item.Id));

}
