@using GymTracker.BlazorClient.Features.WorkoutPlans.Store;
@using System.Collections.Immutable;

@inject IState<WorkoutPlansState> State
@inject IDispatcher Dispatcher

<MudPaper Class="pa-2">
    <MudForm @ref="_form">
        <MudStack Class="fullHeight ma-0">
            @Exercise.Name

            <MudField Variant="Variant.Outlined" Label="Rest Interval" InnerPadding="false">
                <div Class="d-flex flex-row">
                    <MudSelect DisableUnderLine="true"
                               Dense="true" 
                               T="int" 
                               Label="Minutes" 
                               Variant="Variant.Text"
                               Value="_restInterval.Minutes"
                               ValueChanged="HandleSetRestIntervalMinutes">
                        @for (int i = 0; i < 10; i++)
                        {
                            <MudSelectItem Value="@i" />
                        }
                    </MudSelect>
                    <MudSelect DisableUnderLine="true"
                               Dense="true"
                               T="int"
                               Label="Seconds"
                               Variant="Variant.Text"
                               Value="_restInterval.Seconds"
                               ValueChanged="HandleSetRestIntervalSeconds">
                        @for (int i = 0; i < 61; i++)
                        {
                            <MudSelectItem Value="@i" />
                        }
                    </MudSelect>
                </div>
            </MudField>

            <MudSwitch @bind-Checked="_autoTriggerRestTimer"
                       @bind-Checked:after="HandleChange"
                       Label="Auto Start Rest Timer" LabelPosition="LabelPosition.Start" />

            <PlannedSets Sets="_plannedSets"
                         OnUpdateSets="HandleSetsUpdated"
                         OnAddSet="HandleAddSet"></PlannedSets>
        </MudStack>
    </MudForm>
</MudPaper>

@code {
    MudForm _form;
    TimeSpan _restInterval;
    bool _autoTriggerRestTimer;
    ImmutableArray<PlannedSetDetail> _plannedSets = ImmutableArray<PlannedSetDetail>.Empty;

    [Parameter, EditorRequired]
    public Guid WorkoutPlanId { get; set; }

    [Parameter, EditorRequired]
    public PlannedExerciseDetail Exercise { get; set; } = default!;

    protected override void OnParametersSet()
    {
        _restInterval = Exercise.RestInterval;
        _autoTriggerRestTimer = Exercise.AutoTriggerRestTimer;
        _plannedSets = Exercise.PlannedSets;

        base.OnParametersSet();
    }

    public void HandleSetRestIntervalSeconds(int seconds) => HandleSetRestInterval(_restInterval.Minutes, seconds);
    public void HandleSetRestIntervalMinutes(int minutes) => HandleSetRestInterval(minutes, _restInterval.Seconds);
    public void HandleSetRestInterval(int minutes, int seconds)
    {
        _restInterval = new TimeSpan(0, 0, minutes, seconds);
        HandleChange();
    }

    public void HandleSetsUpdated(ImmutableArray<PlannedSetDetail> sets)
    {
        _plannedSets = sets;
        HandleChange();
    }

    public void HandleAddSet() => Dispatcher.Dispatch(new AddSetToExerciseAction(WorkoutPlanId, Exercise));

    void HandleChange()
    {
        var updateDTO = Exercise with
            {
                RestInterval = _restInterval,
                AutoTriggerRestTimer = _autoTriggerRestTimer,
                PlannedSets = _plannedSets
            };
        Dispatcher.Dispatch(new UpdateExerciseForWorkoutPlanAction(WorkoutPlanId, updateDTO));
    }
}