@using GymTracker.BlazorClient.Features.WorkoutPlans.Store;
@using System.Collections.Immutable;

@inherits FluxorComponent

@inject IState<WorkoutPlansState> State
@inject IDispatcher Dispatcher

<MudPaper Class="pa-2">
    <MudForm @ref="_form">
        <MudStack Class="fullHeight ma-0">
            @_model.Name

            <MudField Variant="Variant.Outlined" Label="Rest Interval" InnerPadding="false">
                <div Class="d-flex flex-row">
                    <MudSelect DisableUnderLine="true"
                               Dense="true" 
                               T="int" 
                               Label="Minutes" 
                               Variant="Variant.Text"
                               Value="_model.RestInterval.Minutes"
                               ValueChanged="HandleSetRestIntervalMinutes">
                        @for (int i = 0; i < 10; i++)
                        {
                            <MudSelectItem Value="@i" />
                        }
                    </MudSelect>
                    <MudSelect DisableUnderLine="true"
                               Dense="true"
                               T="int"
                               Label="Seconds"
                               Variant="Variant.Text"
                               Value="_model.RestInterval.Seconds"
                               ValueChanged="HandleSetRestIntervalSeconds">
                        @for (int i = 0; i < 61; i++)
                        {
                            <MudSelectItem Value="@i" />
                        }
                    </MudSelect>
                </div>
            </MudField>

            <MudSwitch Checked="_model.AutoTriggerRestTimer"
                       CheckedChanged="(bool x) => HandleAutoTriggerChange(x)"
                       Label="Auto Start Rest TImer" LabelPosition="LabelPosition.Start" />

            <PlannedSets Sets="_model.PlannedSets"
                         OnUpdateSets="HandleSetsUpdated"
                         OnAddSet="HandleAddExerciseSet"></PlannedSets>
        </MudStack>
    </MudForm>
</MudPaper>

@code {
    MudForm _form;
    PlannedExerciseDetail _model => State.Value.SelectedExercise!;

    public void HandleAutoTriggerChange(bool value) => 
        HandleUpdatePlannedExercise(_model with { AutoTriggerRestTimer = value });
    public void HandleSetRestIntervalSeconds(int seconds) => HandleSetRestInterval(_model.RestInterval.Minutes, seconds);
    public void HandleSetRestIntervalMinutes(int minutes) => HandleSetRestInterval(minutes, _model.RestInterval.Seconds);

    public void HandleSetRestInterval(int minutes, int seconds) => 
        HandleUpdatePlannedExercise(_model with { RestInterval = new TimeSpan(0, 0, minutes, seconds) });

    public void HandleSetsUpdated(ImmutableArray<PlannedSetDetail> sets) =>
        HandleUpdatePlannedExercise(_model with { PlannedSets = sets });

    void HandleUpdatePlannedExercise(PlannedExerciseDetail editItem) =>
        Dispatcher.Dispatch(new UpdateExerciseForWorkoutPlanAction(State.Value.SelectedWorkoutPlan!.Id, editItem));

    void HandleAddExerciseSet() =>
        Dispatcher.Dispatch(new AddSetToExerciseAction(State.Value.SelectedWorkoutPlan!.Id, _model));
}