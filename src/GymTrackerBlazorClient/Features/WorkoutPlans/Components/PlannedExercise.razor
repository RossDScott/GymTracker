@using GymTracker.BlazorClient.Features.Common.UpDownNumericEditor.Store
@using GymTracker.BlazorClient.Features.WorkoutPlans.Store;
@using System.Collections.Immutable;
@using GymTracker.Domain.Models

@inject IState<WorkoutPlansState> State
@inject IDispatcher Dispatcher

<MudPaper Class="pa-2">
    <MudForm @ref="_form">
        <MudStack Class="fullHeight ma-0">
            @Exercise.Name

            <MudField Variant="Variant.Outlined" Label="Rest Interval" InnerPadding="false">
                <div Class="d-flex flex-row">
                    <MudSelect DisableUnderLine="true"
                               Dense="true"
                               T="int"
                               Label="Minutes"
                               Variant="Variant.Text"
                               Value="_model.RestInterval.Minutes"
                               ValueChanged="HandleSetRestIntervalMinutes">
                        @for (int i = 0; i < 10; i++)
                        {
                            <MudSelectItem Value="@i" />
                        }
                    </MudSelect>
                    <MudSelect DisableUnderLine="true"
                               Dense="true"
                               T="int"
                               Label="Seconds"
                               Variant="Variant.Text"
                               Value="_model.RestInterval.Seconds"
                               ValueChanged="HandleSetRestIntervalSeconds">
                        @for (int i = 0; i < 61; i++)
                        {
                            <MudSelectItem Value="@i" />
                        }
                    </MudSelect>
                </div>
            </MudField>

            <MudSwitch @bind-Checked="_model.AutoTriggerRestTimer"
                       @bind-Checked:after="HandleChange"
                       Size="Size.Small"
                       Label="Auto Start Rest Timer" LabelPosition="LabelPosition.Start" />

            @if(Exercise.MetricType is MetricType.Weight or MetricType.Reps)
            {
                <MudField Variant="Variant.Outlined" Label="Progression" InnerPadding="false">
                    <div Class="d-flex flex-row">
                        @if(Exercise.MetricType is MetricType.Weight)
                        {
                            <MudNumericField @bind-Value="_model.TargetRepsLower"
                                             @bind-Value:after="HandleChange"
                                             Label="Min Reps"
                                             Variant="Variant.Text"
                                             DisableUnderLine="true"
                                             HideSpinButtons="true"
                                             Min="0" Max="99" />
                            <MudNumericField @bind-Value="_model.TargetRepsUpper"
                                             @bind-Value:after="HandleChange"
                                             Label="Max Reps"
                                             Variant="Variant.Text"
                                             DisableUnderLine="true"
                                             HideSpinButtons="true"
                                             Min="0" Max="99" />
                        }
                        <MudSelect DisableUnderLine="true"
                                   Dense="true"
                                   T="decimal"
                                   Label="Default Increment"
                                   Variant="Variant.Text"
                                   @bind-Value="_model.TargetWeightIncrement"
                                   @bind-Value:after="HandleChange">
                            @foreach (var increment in ProgressIncrements)
                            {
                                <MudSelectItem Value="@increment" />
                            }
                        </MudSelect>
                    </div>
                </MudField>
            }
 


            <PlannedSets Sets="_model.PlannedSets"
                         MetricType="Exercise.MetricType"
                         OnUpdateSets="HandleSetsUpdated"
                         OnAddSet="HandleAddSet"></PlannedSets>
        </MudStack>
    </MudForm>
</MudPaper>

@code {
    MudForm _form = default!;
    PlannedExerciseEditDTO _model = new();

    decimal[] ProgressIncrements => new decimal[] { 0.25m, 0.5m, 1m, 2m, 3m, 4m, 5m, 10m };

    [Parameter, EditorRequired]
    public Guid WorkoutPlanId { get; set; }

    [Parameter, EditorRequired]
    public PlannedExerciseDetail Exercise { get; set; } = default!;

    protected override void OnParametersSet()
    {
        _model = new PlannedExerciseEditDTO
            {
                Id = Exercise.Id,
                RestInterval = Exercise.RestInterval,
                AutoTriggerRestTimer = Exercise.AutoTriggerRestTimer,
                TargetRepsLower = Exercise.TargetRepsLower,
                TargetRepsUpper = Exercise.TargetRepsUpper,
                TargetWeightIncrement = Exercise.TargetWeightIncrement,
                PlannedSets = Exercise.PlannedSets
            };

        base.OnParametersSet();
    }

    public void HandleSetRestIntervalSeconds(int seconds) => HandleSetRestInterval(_model.RestInterval.Minutes, seconds);
    public void HandleSetRestIntervalMinutes(int minutes) => HandleSetRestInterval(minutes, _model.RestInterval.Seconds);
    public void HandleSetRestInterval(int minutes, int seconds)
    {
        _model.RestInterval = new TimeSpan(0, 0, minutes, seconds);
        HandleChange();
    }

    public void HandleSetsUpdated(ImmutableArray<PlannedSetDetail> sets)
    {
        _model.PlannedSets = sets;
        HandleChange();
    }

    public void HandleAddSet() => Dispatcher.Dispatch(new AddSetToExerciseAction(WorkoutPlanId, Exercise));

    void HandleChange() =>
        Dispatcher.Dispatch(new UpdateExerciseForWorkoutPlanAction(WorkoutPlanId, _model));
}