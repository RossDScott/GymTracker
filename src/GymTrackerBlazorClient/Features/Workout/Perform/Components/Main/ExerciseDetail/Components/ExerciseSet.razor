@using GymTracker.BlazorClient.Features.Common.UpDownNumericEditor
@using GymTracker.BlazorClient.Features.Workout.Perform.Components.Main.ExerciseDetail.Store

@inject IDispatcher Dispatcher

<div @onclick="handleEditRow"
     @onclick:stopPropagation="true"
     class="row @selectedClass py-0">
    <MudGrid Class="fullWidth ma-0 py-1 relative">
        <MudItem xs="2" class="fw-bold d-flex align-content-center flex-wrap">@Set.Name</MudItem>

        @(IsSelected ? @EditRow(editSet) : @ViewRow(Set))
        <MudItem xs="1" class="text-center pt-2 py-0 d-flex align-content-center flex-wrap">
            <MudIconButton Icon="@completedCircleIcon" Class="ma-0 pa-0" OnClick="handleToggleCompleted" />
        </MudItem>


            <MudItem xs="1" Class="pa-0 absolute" Style="right: 35px; top: 2px">
                @if (IsSelected)
            {
                <UpDownIncrement @bind-Value="WeightIncrement" @bind-Value:after="handleWeightIncrementChange"></UpDownIncrement>
            }
            </MudItem>
        

    </MudGrid>
</div>

@code {
    [Parameter, EditorRequired] public RenderFragment<Set> ViewRow { get; set; } = null!;
    [Parameter, EditorRequired] public RenderFragment<EditSet> EditRow { get; set; } = null!;

    [Parameter, EditorRequired] public Guid WorkoutExerciseId { get; set; }
    [Parameter, EditorRequired] public decimal WeightIncrement { get; set; }
    [Parameter, EditorRequired] public Set Set { get; set; } = default!;
    [Parameter, EditorRequired] public bool IsSelected { get; set; }

    private EditSet editSet = default!;

    private string selectedClass => IsSelected ? "selected" : "";
    private string completedCircleIcon => Set.Completed ? Icons.Material.Filled.Circle : @Icons.Material.Outlined.Circle;

    protected override void OnParametersSet()
    {
        editSet = new EditSet(Set);
    }

    private void handleEditRow()
    {
        Dispatcher.Dispatch(new SetSelectedSetAction(Set.Id));
    }

    private void handleToggleCompleted() => Dispatcher.Dispatch(new ToggleSetCompletedAction(WorkoutExerciseId, Set.Id, true));
    private void handleWeightIncrementChange() => Dispatcher.Dispatch(new SetWeightIncrementAction(WorkoutExerciseId, WeightIncrement));
}