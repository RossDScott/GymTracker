@using GymTracker.BlazorClient.Features.Common.ListItemFieldEditor
@using GymTracker.BlazorClient.Features.Workout.Perform.Components.Main.ExerciseDetail.Components.TimeSet
@using GymTracker.BlazorClient.Features.Workout.Perform.Components.Main.ExerciseDetail.Components.WeightSet
@using GymTracker.BlazorClient.Features.Workout.Perform.Components.Main.ExerciseDetail.Store
@using GymTracker.Domain.Models

@inherits FluxorComponent

@inject IState<ExerciseDetailState> State
@inject IDispatcher Dispatcher

<div class="d-flex flex-column fullWidth">
    <MudGrid Class="fullWidth ma-0" Style="font-weight: bold">
        <MudItem xs="2"></MudItem>
        <MudItem xs="3" Class="ps-0 py-0 mr-0 textCenter">Target</MudItem>
        <MudItem xs="3" Class="ps-12 py-0 textCenter">Actual</MudItem>
        <MudItem xs="1" Class=""></MudItem>
        <MudItem xs="1" Class=""></MudItem>
    </MudGrid>

    @Header(State.Value.MetricType)

    @foreach (var set in State.Value.Sets)
    {
        <ExerciseSet 
            Set="set"
            WorkoutExerciseId="State.Value.WorkoutExerciseId"
            WeightIncrement="State.Value.WeightIncrement"
            IsSelected="State.Value.SelectedSetId == set.Id">
            <ViewRow Context="viewSet">
                @ViewSet(State.Value.MetricType, viewSet)
            </ViewRow>
            <EditRow Context="editSet">
                @EditSet(State.Value.MetricType, editSet, State.Value.WorkoutExerciseId, State.Value.WeightIncrement)
            </EditRow>
        </ExerciseSet>
    }

    <div class="d-flex">
        <span class="ml-auto">
            <AddFromList Label="Set Type"
            Large="true"
            List="State.Value.SetTypes"
            OnAddItem="HandleAddRow"></AddFromList>
        </span>

    </div>
</div>

@code {
    RenderFragment Header(MetricType metricType) => metricType switch
    {
        MetricType.Weight => @<HeaderWeightSet></HeaderWeightSet>,
        MetricType.Time => @<HeaderTimeSet></HeaderTimeSet>,
        _ => throw new ArgumentOutOfRangeException()
    };

    RenderFragment ViewSet(MetricType metricType, Set viewSet) => metricType switch 
    {
        MetricType.Weight => @<ViewWeightSet Set="viewSet"></ViewWeightSet>,
        MetricType.Time => @<ViewTimeSet Set="viewSet"></ViewTimeSet>,
        _ => throw new ArgumentOutOfRangeException()
    };

    RenderFragment EditSet(MetricType metricType, EditSet editSet, Guid workoutExerciseId, decimal weightIncrement) => metricType switch
    {
        MetricType.Weight => @<EditWeightSet EditSet="editSet"
                                             WeightIncrement="weightIncrement"
                                             WorkoutExerciseId="workoutExerciseId"></EditWeightSet>,
        MetricType.Time => @<EditTimeSet EditSet="editSet"
                                         WorkoutExerciseId="workoutExerciseId"></EditTimeSet>,
        _ => throw new ArgumentOutOfRangeException()
    };

    void HandleAddRow(string SetType) => Dispatcher.Dispatch(new AddSetAction(State.Value.WorkoutExerciseId, SetType));
}