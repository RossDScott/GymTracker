@using GymTracker.BlazorClient.Features.Common.ListItemFieldEditor
@using GymTracker.BlazorClient.Features.Workout.Perform.Components.Main.ExerciseDetail.Components.WeightSet
@using GymTracker.BlazorClient.Features.Workout.Perform.Components.Main.ExerciseDetail.Store
@using GymTracker.Domain.Models

@inherits FluxorComponent

@inject IState<ExerciseDetailState> State
@inject IDispatcher Dispatcher

<div class="d-flex flex-column fullWidth">
    <MudGrid Class="fullWidth ma-0" Style="font-weight: bold">
        <MudItem xs="2"></MudItem>
        <MudItem xs="3" Class="ps-12 py-0 mr-6 textCenter">Target</MudItem>
        <MudItem xs="3" Class="ps-12 py-0 mr-6 textCenter">Actual</MudItem>
        <MudItem xs="1" Class=""></MudItem>
        <MudItem xs="1" Class=""></MudItem>
    </MudGrid>
    <MudGrid Class="fullWidth ma-0" Style="font-weight: bold">
        <MudItem xs="2"></MudItem>
        <MudItem xs="2" Class="pa-0 textCenter">Weight</MudItem>
        <MudItem xs="1" Class="pa-0 mr-6 textCenter">Reps</MudItem>
        <MudItem xs="2" Class="pa-0 textCenter">Weight</MudItem>
        <MudItem xs="1" Class="pa-0 mr-6 textCenter">Reps</MudItem>
        <MudItem xs="1" Class=""></MudItem>
        <MudItem xs="1" Class=""></MudItem>
    </MudGrid>

    @if(State.Value.MetricType == MetricType.Weight)
    {
        @foreach(var set in State.Value.Sets)
        {
            <ExerciseSet 
                Set="set"
                WorkoutExerciseId="State.Value.WorkoutExerciseId"
                WeightIncrement="State.Value.WeightIncrement"
                IsSelected="State.Value.SelectedSetId == set.Id">
                <ViewRow Context="viewWeightSet">
                    <ViewWeightSet Set="viewWeightSet"></ViewWeightSet>
                </ViewRow>
                <EditRow Context="editWeightSet">
                    <EditWeightSet 
                        EditSet="editWeightSet"
                        WeightIncrement="State.Value.WeightIncrement"
                        WorkoutExerciseId="State.Value.WorkoutExerciseId"></EditWeightSet>
                </EditRow>
            </ExerciseSet>
        }
    }
    <div class="d-flex">
        <span class="ml-auto">
            <AddFromList Label="Set Type"
                         Large="true"
                         List="State.Value.SetTypes"
                         OnAddItem="HandleAddRow"></AddFromList>
        </span>

    </div>
</div>

@code {
    void HandleAddRow(string SetType) => Dispatcher.Dispatch(new AddSetAction(State.Value.WorkoutExerciseId, SetType));
}