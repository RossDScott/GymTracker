@page "/workout/new"

@using GymTracker.BlazorClient.Features.AppBar.Store;
@using GymTracker.BlazorClient.Features.Common;
@using GymTracker.BlazorClient.Features.Common.ChipSet
@using GymTracker.BlazorClient.Features.Workout.Store;
@using System.Collections.Immutable;

@inherits FluxorComponent

@inject IDispatcher Dispatcher
@inject IState<WorkoutState> State

<ChipSet List="State.Value.WorkoutListOrderOptions" Class="mt-3 ml-2"
         SelectedItem="@State.Value.SelectedWorkoutPlanListOrder.Name"
         OnItemClick="HandleOrderChange"></ChipSet>

<MudContainer Class="pa-3 ma-0 d-flex flex-row"Style="width:100%; overflow-y:auto">
    @foreach (var plan in State.Value.WorkoutPlans)
    {
        <MudCard @onclick="_ => HandlePickWorkout(plan)" Class="mr-3" Style="min-width:200px">
            <MudCardHeader class="ps-2 pb-0 bt-2">
                <CardHeaderContent>
                    <MudText Typo="Typo.h5" Align="Align.Left">@plan.Name</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="pa-0">
                <MudList>
                    @foreach (var exercise in plan.PlannedExercises)
                    {
                        <MudListItem Text="@exercise" Dense="true" Class="pb-0" />
                    }
                </MudList>
            </MudCardContent>
        </MudCard>
    }

</MudContainer>

@code {
    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new FetchWorkoutPlansAction(WorkoutListOrder.Recent));
        Dispatcher.Dispatch(new SetBreadcrumbAction(new[]
        {
            new BreadcrumbItem("Workout", "/workout/new", false, Icons.Material.Filled.SportsMartialArts),
            new BreadcrumbItem("New", "/workout/new", false, Icons.Material.Filled.PostAdd)
        }));
        base.OnInitialized();
    }

    void HandleOrderChange(ListItem item) 
        => Dispatcher.Dispatch(new FetchWorkoutPlansAction(Enum.Parse<WorkoutListOrder>(item.Name)));

    void HandlePickWorkout(WorkoutPlanListItem workoutPlan)
        => Dispatcher.Dispatch(new StartWorkoutAction(workoutPlan.Id));
}
