@page "/workout/new"
@using GymTracker.BlazorClient.Features.Common
@using GymTracker.BlazorClient.Features.AppBar.Store;
@using GymTracker.BlazorClient.Features.Common.ChipSet
@using System.Collections.Immutable;
@using GymTracker.BlazorClient.Features.Workout.Perform.Store;
@using GymTracker.LocalStorage.Core;

@inject IDispatcher Dispatcher
@inject IClientStorage ClientStorage

<MudContainer Class="pa-3 ma-0">
    <ChipSet List="@_workoutListOrderOptions" Class="mt-3 ml-2"
             SelectedItem="@_selectedWorkoutPlanListOrder.Name"
             OnItemClick="HandleOrderChange"></ChipSet>

    <div Class="d-flex flex-row flex-wrap ml-2 mt-2 fullWidth">
        @foreach (var plan in _workoutPlans)
        {
            <MudCard @onclick="_ => HandlePickWorkout(plan)" Class="mr-3 mb-3" Style="min-width:200px">
                <MudCardHeader class="ps-2 pb-0 bt-2">
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5" Align="Align.Left">@plan.Name</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent Class="pa-0">
                    <MudList>
                        @foreach (var exercise in plan.PlannedExercises)
                        {
                            <MudListItem OnClick="_ => HandlePickWorkout(plan)" 
                                         Text="@exercise" 
                                         Dense="true" 
                                         Class="pb-0" />
                        }
                    </MudList>
                </MudCardContent>
            </MudCard>
        }
    </div>
</MudContainer>

@code {
    ImmutableArray<WorkoutPlanListItem> _workoutPlans = ImmutableArray<WorkoutPlanListItem>.Empty;
    WorkoutListOrder _workoutPlanOrder = WorkoutListOrder.Recent;

    ImmutableArray<ListItem> _workoutListOrderOptions = Enum.GetNames(typeof(WorkoutListOrder))
        .Select(name => new ListItem(Guid.NewGuid(), name, true))
        .ToImmutableArray();
    ListItem _selectedWorkoutPlanListOrder => _workoutListOrderOptions.Single(x => x.Name == _workoutPlanOrder.ToString());

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new SetBreadcrumbAction(new[]
        {
            new BreadcrumbItem("Workout", "/workout/new", false, Icons.Material.Filled.SportsMartialArts),
            new BreadcrumbItem("New", "/workout/new", false, Icons.Material.Filled.PostAdd)
        }));
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        await bindData();
    }

    void HandlePickWorkout(WorkoutPlanListItem workoutPlan)
        => Dispatcher.Dispatch(new StartWorkoutAction(workoutPlan.Id));

    async Task HandleOrderChange(ListItem listItem)
    {
        _workoutPlanOrder = Enum.Parse<WorkoutListOrder>(listItem.Name);
        await bindData();
    }

    private async Task bindData()
    {
        var workoutPlans = await ClientStorage.WorkoutPlans.GetOrDefaultAsync();
        var recentWorkouts = await ClientStorage.WorkoutStatistics.GetOrDefaultAsync();
        var latestWorkoutForPlan = recentWorkouts
        .GroupBy(x => x.WorkoutPlanId)
        .ToDictionary(
            x => x.Key,
            x => x.OrderByDescending(x => x.CompletedOn)
                  .First()
                  .CompletedOn.DateTime);

        var workPlansVM = workoutPlans
            .Where(x => x.IsAcitve)
            .Select(x => x.ToWorkoutPlanListItem(latestWorkoutForPlan));

        workPlansVM = _workoutPlanOrder switch
        {
            WorkoutListOrder.Recent => workPlansVM
                .OrderByDescending(x => x.LastPerformedOn)
                .Take(10),
            _ => workPlansVM
        };
        _workoutPlans = workPlansVM.ToImmutableArray();
    }
}
