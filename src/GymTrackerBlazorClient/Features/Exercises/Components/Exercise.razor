@using FluentValidation;
@using GymTracker.BlazorClient.Features.Common
@using GymTracker.BlazorClient.Features.Common.ListItemFieldEditor
@using GymTracker.BlazorClient.Features.Exercises.Store;
@using GymTracker.Domain.Models;
@using System.Collections.Immutable;

<MudPaper Class="pa-2">
    <MudForm @ref="_form">
        <MudStack>
            <MudTextField 
                @bind-Value="_exerciseName"
                For="@(() => _exerciseName)"
                Immediate="true"
                DebounceInterval="500"
                OnDebounceIntervalElapsed="HandleUpdateExercise"
                Label="Exercise Name"
                Variant="Variant.Outlined"
                Required="true" 
                RequiredError="Exercise Name required!">
            </MudTextField>

            <MudSelect 
                Class="mt-6"
                Label="Metric Type" 
                Variant="Variant.Outlined" 
                AnchorOrigin="Origin.BottomCenter"
                Value="_metricType"
                ValueChanged="(MetricType value) => HandleMetricTypeChange(value)">

                @foreach (MetricType item in Enum.GetValues(typeof(MetricType)))
                {
                    <MudSelectItem Value="item">@item</MudSelectItem>
                }
            </MudSelect>

            <ListEditor
                Label="Body Target"
                List="_bodyTargets"
                AddPickList="TargetBodyParts"
                OnAdd="HandleAddBodyTarget"
                OnRemove="HandleRemoveBodyTarget"></ListEditor>

            <ListEditor 
                Label="Equipment"
                List="_equipment"
                AddPickList="Equipment"
                OnAdd="HandleAddEquipment"
                OnRemove="HandleRemoveEquipment"></ListEditor>

            <MudSwitch 
                Checked="_isActive" 
                Label="Is Active" 
                LabelPosition="LabelPosition.Start"
                CheckedChanged="(bool isActive) => HandleIsActiveChanged(isActive)" />
        </MudStack>
    </MudForm>
</MudPaper>

@code {

}

@code {
    [Parameter]
    public ImmutableArray<string> TargetBodyParts { get; set; } = ImmutableArray<string>.Empty;

    [Parameter]
    public ImmutableArray<string> Equipment { get; set; } = ImmutableArray<string>.Empty;

    [Parameter, EditorRequired]
    public DetailItem ExerciseDetail { get; set; } = default!;

    [Parameter, EditorRequired]
    public EventCallback<DetailItem> OnExerciseUpdated { get; set; }

    MudForm _form = default!;

    string _exerciseName = string.Empty;
    MetricType _metricType = MetricType.Weight;
    ImmutableArray<string> _bodyTargets = ImmutableArray<string>.Empty;
    ImmutableArray<string> _equipment = ImmutableArray<string>.Empty;
    bool _isActive = true;

    protected override void OnParametersSet()
    {
        _exerciseName = ExerciseDetail.Name;
        _metricType = ExerciseDetail.MetricType;
        _bodyTargets = ExerciseDetail.BodyTarget;
        _equipment = ExerciseDetail.Equipment;
        _isActive = ExerciseDetail.IsActive;

        _form?.ResetValidation();

        base.OnParametersSet();
    }

    async Task HandleMetricTypeChange(MetricType metricType)
    {
        _metricType = metricType;
        await HandleUpdateExercise();
    }

    async Task HandleAddBodyTarget(string newBodyTarget)
    {
        _bodyTargets = _bodyTargets.Add(newBodyTarget);
        await HandleUpdateExercise();
    }

    async Task HandleRemoveBodyTarget(string bodyTarget)
    {
        _bodyTargets = _bodyTargets.Remove(bodyTarget);
        await HandleUpdateExercise();
    }

    async Task HandleAddEquipment(string equipment)
    {
        _equipment = _equipment.Add(equipment);
        await HandleUpdateExercise();
    }

    async Task HandleRemoveEquipment(string equipment)
    {
        _equipment = _equipment.Remove(equipment);
        await HandleUpdateExercise();
    }

    async Task HandleIsActiveChanged(bool isActive)
    {
        _isActive = isActive;
        await HandleUpdateExercise();
    }

    async Task HandleUpdateExercise()
    {
        await _form.Validate();

        if (!_form.IsValid)
            return;

        var updateDTO = ExerciseDetail with
            {
                Name = _exerciseName,
                MetricType = _metricType,
                BodyTarget = _bodyTargets,
                Equipment = _equipment,
                IsActive = _isActive
            };

        await OnExerciseUpdated.InvokeAsync(updateDTO);
    }
}