@using FluentValidation;
@using GymTracker.BlazorClient.Features.Exercises.Store;
@using GymTracker.Domain.Models;
@using System.Collections.Immutable;

<MudPaper Class="pa-2">
    <MudForm @ref="_form">
        <MudStack>
            <MudTextField 
                @bind-Value="_exerciseName"
                For="@(() => _exerciseName)"
                Immediate="true"
                DebounceInterval="500"
                OnDebounceIntervalElapsed="HandleUpdateExercise"
                Label="Exercise Name"
                Variant="Variant.Outlined"
                Required="true" 
                RequiredError="Exercise Name required!">
            </MudTextField>

            <MudSelect 
                Class="mt-6"
                Label="Metric Type" 
                Variant="Variant.Outlined" 
                AnchorOrigin="Origin.BottomCenter"
                Value="_metricType"
                ValueChanged="(MetricType value) => HandleMetricTypeChange(value)">

                @foreach (MetricType item in Enum.GetValues(typeof(MetricType)))
                {
                    <MudSelectItem Value="item">@item</MudSelectItem>
                }
            </MudSelect>

            <MudField
                Class="mt-6"
                Label="Body Type" 
                Variant="Variant.Outlined">
                @foreach (var item in _bodyTargets)
                {
                    <MudChip 
                        Color="Color.Info"
                        OnClose="() => HandleRemoveBodyTarget(item)">
                        @item
                    </MudChip>
                }
                <AddBodyTarget OnAddBodyTarget="HandleAddBodyTarget"></AddBodyTarget>
            </MudField>

            <MudSwitch 
                Checked="_isActive" 
                Label="Is Active" 
                LabelPosition="LabelPosition.Start"
                CheckedChanged="(bool isActive) => HandleIsActiveChanged(isActive)" />
        </MudStack>
    </MudForm>
</MudPaper>

@code {

}

@code {
    [Parameter, EditorRequired]
    public DetailItem ExerciseDetail { get; set; } = default!;

    [Parameter, EditorRequired]
    public EventCallback<DetailItem> OnExerciseUpdated { get; set; }

    MudForm _form;

    string _exerciseName = string.Empty;
    MetricType _metricType = MetricType.Weight;
    List<string> _bodyTargets = new();
    bool _isActive = true;

    protected override void OnParametersSet()
    {
        _exerciseName = ExerciseDetail.Name;
        _metricType = ExerciseDetail.MetricType;
        _bodyTargets = ExerciseDetail.BodyTarget.ToList();
        _isActive = ExerciseDetail.IsActive;

        _form?.ResetValidation();

        base.OnParametersSet();
    }

    async Task HandleMetricTypeChange(MetricType metricType)
    {
        _metricType = metricType;
        await HandleUpdateExercise();
    }

    async Task HandleAddBodyTarget(string newBodyTarget)
    {
        _bodyTargets.Add(newBodyTarget);
        await HandleUpdateExercise();
    }

    async Task HandleRemoveBodyTarget(string bodyTarget)
    {
        _bodyTargets.Remove(bodyTarget);
        await HandleUpdateExercise();
    }

    async Task HandleIsActiveChanged(bool isActive)
    {
        _isActive = isActive;
        await HandleUpdateExercise();
    }

    async Task HandleUpdateExercise()
    {
        await _form.Validate();

        if (!_form.IsValid)
            return;

        var updateDTO = ExerciseDetail with
            {
                Name = _exerciseName,
                MetricType = _metricType,
                BodyTarget = _bodyTargets.ToImmutableArray(),
                IsActive = _isActive
            };

        await OnExerciseUpdated.InvokeAsync(updateDTO);
    }
}