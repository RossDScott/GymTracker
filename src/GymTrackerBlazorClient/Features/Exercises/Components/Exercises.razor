@page "/exercises";
@page "/exercises/{Id:guid}"
@page "/exercises/new"

@using GymTracker.BlazorClient.Features.Exercises.Store;

@inherits FluxorComponent

@inject NavigationManager NaviagationManager
@inject IState<ExercisesState> State
@inject IDispatcher Dispatcher

<MudGrid Class="fullHeight ma-0">
    <MudItem xs="3" Class=" mb-0 fullHeight">
        <MudPaper Class="pa-0 fullHeight" style="overflow-y: auto; position: relative;">
            <MudToolBar 
                Class="px-2 z-10" 
                Style="@($"position: sticky; top: 0; background-color: {Theme.PaletteDark.AppbarBackground}")">
                <MudTextField @bind-Value="Search"
                    Label="Search"
                    Variant="Variant.Text"
                    Adornment="Adornment.End"
                    AdornmentIcon="@Icons.Material.Filled.Search"
                    Margin="Margin.Dense" />
                    <MudIconButton Icon="@Icons.Material.Filled.FilterList"
                    Color="Color.Inherit"
                    Class="" />
            </MudToolBar>

            <MudList 
                Class="z-0"
                Color="Color.Surface"
                Clickable="true"
                SelectedValue="State.Value.SelectedExercise?.Id">
                @foreach (var item in State.Value.Exercises)
                {
                    <MudListItem 
                        OnClick="() => HandleExerciseSelected(item)"
                        Value="item.Id"
                        Style="@(item.IsAcitve ? "" : $"color: {Theme.PaletteDark.TextDisabled}")">
                        <MudText Typo="Typo.subtitle1">@item.Name</MudText>
                    </MudListItem>
                }
            </MudList>
            <div class="d-flex flex-row-reverse" Style="position: sticky; bottom: 5px">
                <MudFab 
                    Color="Color.Dark"
                    StartIcon="@Icons.Material.Filled.Add"
                    OnClick="HandleAddNewExercise" />
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="4" Class="ma-2">
        @if(State.Value.SelectedExercise is not null)
        {
            <Exercise 
                ExerciseDetail="State.Value.SelectedExercise"
                OnExerciseUpdated="HandleUpdateExercise">
            </Exercise>
        }
    </MudItem>
    <MudItem xs="4" Class="ma-2">
        @if(State.Value.SelectedExercise is not null)
        {
            <MudPaper Class="pa-16 ma-2" Elevation="3">
                This is where the records and charts will be
            </MudPaper>            
        }
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public Guid? Id { get; set; } = null;

    MudTheme Theme = new();

    string Search = "";

    protected override void OnInitialized()
    {
        NaviagationManager.LocationChanged += HandleLocationChanged;

        SubscribeToAction<NavigateToNewExerciseAction>(action =>
            NaviagationManager.NavigateTo($"/exercises/{action.Id}"));

        Dispatcher.Dispatch(new FetchExercisesAction());
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (Id is not null)
            Dispatcher.Dispatch(new FetchExerciseAction(Id.Value));

        base.OnParametersSet();
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.EndsWith("new"))
            Dispatcher.Dispatch(new CreateNewExerciseAction());
    }

    void HandleExerciseSelected(ListItem item) =>
        NaviagationManager.NavigateTo($"/exercises/{item.Id}");

    void HandleAddNewExercise() =>
        NaviagationManager.NavigateTo($"/exercises/new");

    void HandleUpdateExercise(DetailItem updateDTO) =>
        Dispatcher.Dispatch(new AddOrUpdateExerciseAction(updateDTO));

    public void Dispose()
    {
        NaviagationManager.LocationChanged -= HandleLocationChanged;
    }
}
