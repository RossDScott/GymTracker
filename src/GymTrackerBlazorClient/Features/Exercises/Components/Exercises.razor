@page "/exercises";
@page "/exercises/{Id:guid}"

@using GymTracker.BlazorClient.Features.Exercises.Store;

@inherits FluxorComponent

@inject NavigationManager NaviagationManager
@inject IState<ExercisesState> State
@inject IDispatcher Dispatcher

<MudGrid>
    <MudItem xs="3" Class="ma-2">
        <MudPaper Class="pa-1">
            <MudList 
                Clickable="true"
                SelectedValue="State.Value.SelectedExercise?.Id">
                <MudListItem Class="pr-2 pt-0 pb-1">
                    <div class="d-flex justify-end">
                        <MudText Class="mr-1" Typo="Typo.subtitle1">Add Exercise</MudText>
                        <MudIcon Icon="@Icons.Material.Filled.AddCircle"></MudIcon>
                    </div>
                </MudListItem>
                <MudDivider />
                @foreach(var item in State.Value.Exercises)
                {
                    <MudListItem 
                        OnClick="() => HandleExerciseSelected(item)"
                        Value="item.Id">
                        <MudText Typo="Typo.subtitle1">@item.Name</MudText>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
    </MudItem>
    <MudItem xs="4" Class="ma-2">
        @if(State.Value.SelectedExercise is not null)
        {
            <Exercise ExerciseDetail="State.Value.SelectedExercise"></Exercise>
        }
    </MudItem>
    <MudItem xs="4" Class="ma-2">
        @if(State.Value.SelectedExercise is not null)
        {
            <MudPaper Class="pa-16 ma-2" Elevation="3">
                This is where the records and charts will be
            </MudPaper>            
        }
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public Guid? Id { get; set; } = null;

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new FetchExercisesAction());
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (Id is not null)
            Dispatcher.Dispatch(new FetchExerciseAction(Id.Value));

        base.OnParametersSet();
    }

    void HandleExerciseSelected(ListItem item) =>
    NaviagationManager.NavigateTo($"/exercises/{item.Id}");
}
