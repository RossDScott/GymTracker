@page "/exercises";
@page "/exercises/{Id:guid}"
@page "/exercises/new"

@using GymTracker.BlazorClient.Features.AppBar.Store;
@using GymTracker.BlazorClient.Features.Common.FullHeightList;
@using GymTracker.BlazorClient.Features.Exercises.Store;
@using GymTracker.BlazorClient.Features.Common;

@inherits FluxorComponent

@inject NavigationManager NaviagationManager
@inject IState<ExercisesState> State
@inject IDispatcher Dispatcher

<MudGrid Class="fullHeight ma-0" Justify="Justify.SpaceEvenly" Style="width: 100%">
    <MudItem xs="4" Class=" mb-0 fullHeight" Style="position: relative">
        <FullHeightList 
            List="State.Value.Exercises"
            SelectedId="State.Value.SelectedExercise?.Id"
            OnItemClick="HandleExerciseSelected"
            OnAddItem="HandleAddNewExercise">
            <Filter>
                <ExercisesFilter></ExercisesFilter>
            </Filter>
        </FullHeightList>
    </MudItem>
    <MudItem xs="4" Class="">
        @if(State.Value.SelectedExercise is not null)
        {
            <Exercise
                TargetBodyParts="State.Value.TargetBodyParts"
                Equipment="State.Value.Equipment"
                ExerciseDetail="State.Value.SelectedExercise"
                OnExerciseUpdated="HandleUpdateExercise">
            </Exercise>
        }
    </MudItem>
    <MudItem xs="4" Class="">
        @if(State.Value.SelectedExercise is not null)
        {
            <MudPaper Class="pa-16" Elevation="3">
                This is where the records and charts will be
            </MudPaper>            
        }
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public Guid? Id { get; set; } = null;

    MudTheme Theme = new();

    string Search = "";

    protected override void OnInitialized()
    {
        NaviagationManager.LocationChanged += HandleLocationChanged;

        SubscribeToAction<NavigateToNewExerciseAction>(action =>
            NaviagationManager.NavigateTo($"/exercises/{action.Id}"));

        HandleSetupPageByLocation(NaviagationManager.Uri, true);
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        HandleSetupPageByLocation(NaviagationManager.Uri);
        base.OnParametersSet();
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e) =>
        HandleSetupPageByLocation(e.Location);

    private void HandleSetupPageByLocation(string location, bool initialLoad = false)
    {
        if (location.EndsWith("exercises") || initialLoad)
            Dispatcher.Dispatch(new FetchExercisesAction());

        if (Id is not null)
            Dispatcher.Dispatch(new FetchExerciseAction(Id.Value));

        if (location.EndsWith("new"))
            Dispatcher.Dispatch(new CreateNewExerciseAction());
    }

    void HandleExerciseSelected(ListItem item) =>
        NaviagationManager.NavigateTo($"/exercises/{item.Id}");

    void HandleAddNewExercise() =>
        NaviagationManager.NavigateTo($"/exercises/new");  

    void HandleUpdateExercise(DetailItem updateDTO) =>
        Dispatcher.Dispatch(new AddOrUpdateExerciseAction(updateDTO));
}