@page "/exercises";
@page "/exercises/{Id:guid}"
@page "/exercises/new"

@using GymTracker.BlazorClient.Features.AppBar.Store;
@using GymTracker.BlazorClient.Features.Common.FullHeightList;
@using GymTracker.BlazorClient.Features.Exercises.Store;
@using GymTracker.BlazorClient.Features.Common;

@inherits FluxorComponent

@inject NavigationManager NaviagationManager
@inject IState<ExercisesState> State
@inject IDispatcher Dispatcher

<MudGrid Class="fullHeight ma-0" Justify="Justify.SpaceEvenly" Style="width: 100%">
    <MudItem xs="4" Class=" mb-0 fullHeight" Style="position: relative">
        <FullHeightList
            List="State.Value.DisplayList"
            SelectedId="State.Value.SelectedExercise?.Id"
            OnItemClick="HandleExerciseSelected"
            OnAddItem="HandleAddNewExercise">
            <Filter>
                <ExercisesFilter></ExercisesFilter>
            </Filter>
        </FullHeightList>
    </MudItem>
    <MudItem xs="4" Class="">
        @if(State.Value.SelectedExercise is not null)
        {
            <Exercise
                TargetBodyParts="State.Value.TargetBodyParts"
                Equipment="State.Value.Equipment"
                ExerciseDetail="State.Value.SelectedExercise"
                OnExerciseUpdated="HandleUpdateExercise">
            </Exercise>
        }
    </MudItem>
    <MudItem xs="4" Class="">
        @if(State.Value.SelectedExercise is not null)
        {
            <MudPaper Class="pa-16" Elevation="3">
                This is where the records and charts will be
            </MudPaper>            
        }
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public Guid? Id { get; set; } = null;

    MudTheme Theme = new();

    string Search = "";

    protected override void OnInitialized()
    {
        NaviagationManager.LocationChanged += HandleLocationChanged;

        SubscribeToAction<NavigateToNewExerciseAction>(action =>
            NaviagationManager.NavigateTo($"/exercises/{action.Id}"));

        SubscribeToAction<SetExerciseAction>(action =>
        {
            Dispatcher.Dispatch(new SetBreadcrumbAction(new[]
            {
                new BreadcrumbItem("Exercises", "/exercises", false, Icons.Material.Filled.List),
                new BreadcrumbItem(action.Exercise.Name, $"/exercises/{action.Exercise.Id}", false, Icons.Material.Filled.Edit),
            }));
        });

        Dispatcher.Dispatch(new FetchExercisesAction(Id));
        Dispatcher.Dispatch(new SetBreadcrumbAction(new[]
        {
            new BreadcrumbItem("Exercises", "/exercises", false, Icons.Material.Filled.List)
        }));

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (Id is not null)
            Dispatcher.Dispatch(new FetchExerciseAction(Id.Value));

        base.OnParametersSet();
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.EndsWith("new"))
        {
            Dispatcher.Dispatch(new CreateNewExerciseAction());
            Dispatcher.Dispatch(new SetBreadcrumbAction(new[]
            {
                new BreadcrumbItem("Exercises", "/exercises", false, Icons.Material.Filled.List),
                new BreadcrumbItem("New", "/exercises/new", false, Icons.Material.Filled.Add),
            }));
        }

        if (e.Location.EndsWith("exercises"))
        {
            Dispatcher.Dispatch(new FetchExercisesAction());
            Dispatcher.Dispatch(new SetBreadcrumbAction(new[]
            {
                new BreadcrumbItem("Exercises", "/exercises", false, Icons.Material.Filled.List)
            }));
        }
    }

    void HandleExerciseSelected(ListItem item) =>
        NaviagationManager.NavigateTo($"/exercises/{item.Id}");
    
    void HandleAddNewExercise() =>
        NaviagationManager.NavigateTo($"/exercises/new");

    void HandleUpdateExercise(DetailItem updateDTO) =>
        Dispatcher.Dispatch(new AddOrUpdateExerciseAction(updateDTO));

    public void Dispose()
    {
        NaviagationManager.LocationChanged -= HandleLocationChanged;
    }
}