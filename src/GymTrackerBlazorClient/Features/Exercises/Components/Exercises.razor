@page "/exercises";
@page "/exercises/{Id:guid}"
@page "/exercises/new"

@using GymTracker.BlazorClient.Features.Exercises.Store;

@inherits FluxorComponent

@inject NavigationManager NaviagationManager
@inject IState<ExercisesState> State
@inject IDispatcher Dispatcher

<MudGrid Class="fullHeight">
    <MudItem xs="3" Class="ma-2 fullHeight">
        <MudPaper Class="pa-1 fullHeight">
            <MudList
                Clickable="true"
                SelectedValue="State.Value.SelectedExercise?.Id">
                <MudListItem 
                    Class="pr-2 pt-0 pb-1"
                    OnClick="HandleAddNewExercise">
                    <div class="d-flex justify-end">
                        <MudText Class="mr-1" Typo="Typo.subtitle1">Add Exercise</MudText>
                        <MudIcon Icon="@Icons.Material.Filled.AddCircle"></MudIcon>
                    </div>
                </MudListItem>
                <MudDivider />
                <div class="fullHeight">
                    @foreach (var item in State.Value.Exercises)
                    {
                        <MudListItem 
                            OnClick="() => HandleExerciseSelected(item)"
                            Value="item.Id"
                            Style="@(item.IsAcitve ? "" : $"color: {Theme.Palette.TextDisabled}")">
                            <MudText Typo="Typo.subtitle1">@item.Name</MudText>
                        </MudListItem>
                    }
                </div>
            </MudList>
        </MudPaper>
    </MudItem>
    <MudItem xs="4" Class="ma-2">
        @if(State.Value.SelectedExercise is not null)
        {
            <Exercise 
                ExerciseDetail="State.Value.SelectedExercise"
                OnExerciseUpdated="HandleUpdateExercise">
            </Exercise>
        }
    </MudItem>
    <MudItem xs="4" Class="ma-2">
        @if(State.Value.SelectedExercise is not null)
        {
            <MudPaper Class="pa-16 ma-2" Elevation="3">
                This is where the records and charts will be
            </MudPaper>            
        }
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public Guid? Id { get; set; } = null;

    MudTheme Theme = new();

    protected override void OnInitialized()
    {
        NaviagationManager.LocationChanged += HandleLocationChanged;

        SubscribeToAction<NavigateToNewExerciseAction>(action =>
            NaviagationManager.NavigateTo($"/exercises/{action.Id}"));

        Dispatcher.Dispatch(new FetchExercisesAction());
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (Id is not null)
            Dispatcher.Dispatch(new FetchExerciseAction(Id.Value));

        base.OnParametersSet();
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.EndsWith("new"))
            Dispatcher.Dispatch(new CreateNewExerciseAction());
    }

    void HandleExerciseSelected(ListItem item) =>
        NaviagationManager.NavigateTo($"/exercises/{item.Id}");

    void HandleAddNewExercise() =>
        NaviagationManager.NavigateTo($"/exercises/new");

    void HandleUpdateExercise(DetailItem updateDTO) =>
        Dispatcher.Dispatch(new AddOrUpdateExerciseAction(updateDTO));

    public void Dispose()
    {
        NaviagationManager.LocationChanged -= HandleLocationChanged;
    }
}
