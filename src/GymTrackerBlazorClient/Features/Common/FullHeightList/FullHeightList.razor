@using System.Collections.Immutable;
@using GymTracker.BlazorClient.Features.Common;
@using GymTracker.BlazorClient.Shared.Extensions;
@using GymTracker.Domain.Models;

<div class="fullHeight" style="position: relative">
    <MudPaper Class="pa-0 fullHeight" style="overflow-y: auto; position: relative;">
        @Filter
        <MudList 
            Class="z-0"
            Color="Color.Info"
            Clickable="true"
            SelectedValue="SelectedId">
            @foreach (var (item, index) in List.LoopIndex())
            {
                @RenderListItem(item, index)
            }
        </MudList>
    </MudPaper>
    @if (OnAddItem.HasDelegate)
    {
        <div class="d-flex flex-row-reverse" style="position: absolute; bottom: 5px; right: 5px">
            <MudFab Color="Color.Dark"
                    StartIcon="@Icons.Material.Filled.Add"
                    OnClick="_ => OnAddItem.InvokeAsync()" />
        </div>
    }
</div>

@code {
    RenderFragment? WhenEnabledShowReorderButtons(ListItem item, int index)
    => CanReorder && item.Id == SelectedId && !AutoCollapseOnSelection
        ? @<div class="d-flex flex-column" style="margin-left: auto">
            <MudIconButton 
                       Icon="@Icons.Material.Filled.ArrowDropUp"
                       Size="Size.Small"
                       Style="padding: 0"
                       OnClick="_ => OnChangeOrder.InvokeAsync((item, OrderDirection.Up))"></MudIconButton>
            <MudIconButton 
                       Icon="@Icons.Material.Filled.ArrowDropDown"
                       Size="Size.Small"
                       Style="padding: 0"
                       OnClick="_ => OnChangeOrder.InvokeAsync((item, OrderDirection.Down))"></MudIconButton>
           </div>
        : null;

    RenderFragment RenderListItem(ListItem item, int index)
        => AutoCollapseOnSelection && SelectedId is not null
        ? @<MudListItem OnClick="() => OnItemClick.InvokeAsync(item)"
                        Value="item.Id"
                        Style="@(item.IsAcitve ? "" : $"color: {Theme.PaletteDark.TextDisabled}")">
                <MudText Typo="Typo.subtitle2">@item.Name</MudText>
           </MudListItem>
        : @<MudListItem OnClick="() => OnItemClick.InvokeAsync(item)"
                        Value="item.Id"
                        Style="@(item.IsAcitve ? "" : $"color: {Theme.PaletteDark.TextDisabled}")">
            <div class="d-flex flex-row">
                <MudText Typo="Typo.subtitle1">@item.Name</MudText>
            @WhenEnabledShowReorderButtons(item, index)
            </div>
        </MudListItem>;
}

@code {
    [Parameter]
    public RenderFragment? Filter { get; set; }

    [Parameter, EditorRequired]
    public ImmutableArray<ListItem> List { get; set; } = ImmutableArray<ListItem>.Empty;

    [Parameter]
    public Guid? SelectedId { get; set; } = null;

    [Parameter]
    public EventCallback OnAddItem { get; set; }

    [Parameter]
    public bool CanReorder { get; set; } = false;

    [Parameter]
    public bool AutoCollapseOnSelection { get; set; } = false;

    [Parameter]
    public EventCallback<ListItem> OnItemClick { get; set; }

    [Parameter]
    public EventCallback<(ListItem, OrderDirection)> OnChangeOrder { get; set; }

    MudTheme Theme = new();
}
