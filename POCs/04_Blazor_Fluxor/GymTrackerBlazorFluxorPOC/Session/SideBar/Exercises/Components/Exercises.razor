@using GymTrackerBlazorFluxorPOC.Session.Actions
@using GymTrackerBlazorFluxorPOC.Session.SideBar.Exercises.Actions
@inherits FluxorComponent

@inject IDispatcher Dispatcher
@inject IState<ExercisesState> State
@inject IJSRuntime JS;


<ul class="list-group list-group-flush me-1">
    @foreach (var item in State.Value.Exercises)
    {
        @renderExerciseRow((
            exercise: item, 
            selectedId: State.Value.SelectedExerciseId, 
            onClick: () => Dispatcher.Dispatch(new SetSelectedExerciseAction(item.id))))
    }
</ul>
@*<AddExercise OnAdd="(exercise) => sessionData.AddExercise(exercise)"></AddExercise>*@

@code {
    private RenderFragment<(Exercise exercise, Guid? selectedId, Action onClick)> renderExerciseRow = value =>
        @<li class="list-group-item @(value.exercise.id == value.selectedId ? "fw-bold" : "")"
            onclick="@value.onClick">
            @value.exercise.name
        </li>;
}

@code {
    protected override Task OnInitializedAsync()
    {
        Dispatcher.Dispatch(new LoadExercisesAction());

        return base.OnInitializedAsync();
    }
}